(ns kaaf.contracts.sequence-validators
  "Provide validator utilities to perform sequence contract validations
  on events and other kinds of payloads.

  RATIONALE

  We may apply various lenses to validate the same thing. For example:
  - one lens is to validate the sequence/presence/absence of events,
    i.e. contracts for _event sequences_
  - another lens is to validate every event conforms to a schema for
    the event type, i.e. contracts for event _schema & runtime values_

  In the above example, we can use one kind of validator to check that
  events obey the \"event sequence\" contract, and another kind of
  validator that checks each event obeys its \"schema\" contract, without
  bothering about sequence contracts because that's someone else's job.

  Related: validators for event sequence contracts can simply be plain old
  filter/predicate style functional checks, whereas validators for schemas
  may use clojure.spec specs, or some other system like schema registry
  or pact.io, and both \"lenses\" are independent of each other."
  (:require [mint.validation.mappings :as mvm]))


;; Example validator utils:
;; Just for checking order and/or presence of events. No spec involved here.


(defn exactly-ordered?
  "Checks whether the events generated by kafka
  and the events specified in the contracts->
  :exactly-ordered section of the action DSL
  are exactly the same along with the order.
  NOTE:- In the first phase we are making use
  only of the exactly-ordered validator.
  The other validators below SHOULD NOT be used
  for now.
  Later when the need arises we will start using
  and supporting other validators as well."
  [{exactly-ordered :exactly-ordered
    :as contract} events]
  (if (or (seq exactly-ordered)
          (seq events))
    (= exactly-ordered events)
    true))


(defn each-once?
  "Checks whether the events specified in the
  contracts->:each-once section of the action
  DSL appears exactly once in the kafka events generated.
  The sequence of the events does not matter here.
  NOTE :- However, this validator is not supported for
  phase 1 of kaaf. So, avoid using it."
  [{each-once :each-once
    :as contract} events]
  (let [event-frequencies (frequencies events)]
    (every? #(= 1
                (% event-frequencies))
            each-once)))


(defn each-atleast-once?
  "Checks whether the events specified in the
  contracts->:each-atleast-once section of the action
  DSL appears alteast once in the kafka events generated.
  The sequence of the events does not matter here.
  NOTE :- However, this validator is not supported for
  phase 1 of kaaf. So, avoid using it."
  [{each-atleast-once :each-atleast-once
    :as contract}
   events]
  (every? (set events)
          each-atleast-once))


(defn never?
  "Checks whether the events specified in the
  contracts->:never section of the action
  DSL does not appear in the kafka events generated.
  NOTE :- However, this validator is not supported for
  phase 1 of kaaf. So, avoid using it."
  [{never :never
    :as contract} events]
  (not-any? (set events)
            never))


(defn valid-events?
  [{:keys [exactly-ordered
           each-once
           each-atleast-once
           never]
    :as contract} events]
  (every? identity
          ((juxt exactly-ordered?
                 each-once?
                 each-atleast-once?
                 never?) contract events)))


;;
;; General-purpose utilities to run any validator against
;; action(s)->events combinations.
;;
(defn validate-event-contracts-for-all-actions?
  "Dirty impl, which would work just fine on in-memory data,
  because lazy evaluation and short-ciruiting behaviour of the checks.

  We can add spec validations in addition to the event-order-or-presence
  contract validations."
  [events-lookup-fn validator-fn & action+events-ctx]
  (every? (fn [a+e-ctx]
            (validator-fn (:contract a+e-ctx)
                          (events-lookup-fn (:events a+e-ctx))))
          action+events-ctx))


;;
;; Kafka-event-specific utilities to run any validator against
;; action(s)->events combinations.
;;


(defn kafka-events->event-types
  "Given a collection of well-formed kafka event payloads, emit the
  corresponding Mint types."
  [kafka-events-xs]
  (map (fn [{:keys [value] :as kafka-event}]
         (mvm/codes->types
          (get value "type" 0)))
       kafka-events-xs))


(defn validate-kafka-events-for-actions
  "Given a collection of action+events payloads, where _each_ payload has
  the action context and the related :events, segregate payloads into
  :valid and :invalid groups.

  For successful validation, :invalid should be empty."
  [& action+events-ctx-xs]
  (group-by (fn [action+events-ctx]
              (if (validate-event-contracts-for-all-actions?
                   kafka-events->event-types
                   valid-events?
                   action+events-ctx)
                :valid
                :invalid))
            action+events-ctx-xs))


(defn validate-kafka-events-for-actions-with-results
  "Given a collection of action+events payloads, where _each_ payload has
  the action context and the related :events, validate whether each action
  has correct events been generated or not

  A new flag named :valid-events? is punched into each action"
  [verbose-result? & action+events-ctx-xs]
  (map (fn [action+events-ctx]
         (let [action+events-result (assoc action+events-ctx
                                           :valid-events? (boolean (validate-event-contracts-for-all-actions?
                                                                    identity
                                                                    valid-events?
                                                                    action+events-ctx)))
               short-result? (not verbose-result?)]
           (if (and (:valid-events? action+events-result)
                    short-result?)
             (dissoc action+events-result
                     :headers
                     :response)
             action+events-result)))
       action+events-ctx-xs))


(comment
  ;; TODO: Move this into a unit test.
  ;; Demo of mock business actions + associated events, using
  ;; actual type names from Mint.
  mvm/codes->types

  (let [;; Setup parts of event _sequence_ contract, supported by our DSL.
        ;; To define each part, simply read mint event table, and write down
        ;; event types you expect for a certain business action.
        exactly-ordered [:create_issue_by_customer :first_reply_to_issue_by_customer]
        each-once [:assign_issue_to_agent]
        each-atleast-once [:view_issue_by_agent :change_queue_of_issue]
        never [:redact_issue]


        ;; Sample sample-dsl-declaration-for-a-business-action, as per our DSL,
        ;; along with a full-blown event _sequence_ contract to help us validate
        ;; all the scenarios that our sequence validator logic should support.
        sample-dsl-declaration-for-a-business-action
        {:action [:create :sdk :issue]
         :ctx {}
         :contract {:exactly-ordered exactly-ordered
                    :each-once each-once
                    :each-atleast-once each-atleast-once
                    :never never}}

        ;; Utility to create mock kafka-specific action+events payloads,
        ;; which we can then validate using our sequence validation logic.
        mock-action+events-ctx-payload
        (fn [kafka-event-types]
          (assoc sample-dsl-declaration-for-a-business-action
                 :events
                 (map (fn [event-type]
                        {:value
                         {;; WE ONLY CARE ABOUT THIS TYPE, for sequence validation
                          "type" (mvm/types->codes event-type), ;; mocked from mint event type
                          "mint-type-alias" (name event-type) ;; injected for test reference
                          ;; The remaining kafka event data is irrelevant for
                          ;; event _sequence_ validation, BUT we need it
                          ;; separately for event _contract_ validation.
                          "kafka_meta" {"msg_ts" 1580393827936},
                          "action_taken_at" 1580393827819,
                          "data" {} ,
                          "generated_at" 1580393827935},
                         :key "test_issue_20200130141702793-996fe597afb6eff",
                         :partition 0,
                         :topic "dashboard_events",
                         :offset 4818})
                      kafka-event-types)))

        ;; And now, various scenarios to emulate the idea that we perform
        ;; a sequence of actions, and then validate events found for each action.
        ;;
        ;; - Let's say we declare a sequence of actions using our DSL
        ;; - Then, we use whatever action runner to execute each action in sequence,
        ;; - Meanwhile, we happen to be simultaneously reading events from Kafka
        ;; - We wait for a SLA timeout period to allow Kafka events to be read
        ;; - Then, before validation, we do a pass to join each action with the
        ;;   relevant events that we have found in the Kafka topic
        ;; - These joined payloads are now available for manual inspection,
        ;;   for logging/persisting to disk for later analysis, and of course
        ;;   for various kinds of automated validations.
        ;; - Now, we run the event _sequence_ validator logic in one pass
        ;; - And, optionally run event _schema_ validation in a separate pass
        ;;
        ;; The event _sequence_ validation pass is emulated below:
        ;;
        good-events (mock-action+events-ctx-payload
                     (concat exactly-ordered
                             each-once
                             each-atleast-once))
        also-good   (mock-action+events-ctx-payload
                     (concat (interleave exactly-ordered each-atleast-once)
                             each-once))
        wrong-order (mock-action+events-ctx-payload
                     (concat (reverse exactly-ordered)
                             each-once
                             each-atleast-once))
        missing     (mock-action+events-ctx-payload
                     (concat exactly-ordered
                             ;; 'each-once' dropped, for example
                             each-atleast-once))
        duplicate   (mock-action+events-ctx-payload
                     (concat exactly-ordered
                             ;; whoops! duplicate!
                             each-once ;; Anju
                             each-once ;; Mai Anju nahi, Manju huu jee.
                             each-atleast-once))
        unwanted    (mock-action+events-ctx-payload
                     (concat exactly-ordered
                             each-once
                             never ;; oh noes! iska time kaise aaya?
                             each-atleast-once))
        no-events (mock-action+events-ctx-payload
                   '());; no events came up
        ]
    ((juxt (comp count :valid)
           (comp count :invalid))
     ;; segregate into :valid and :invalid, based on event sequence contracts
     (validate-kafka-events-for-actions
      ;; these 2 should get grouped as :valid
      good-events
      also-good
      ;; these 4 should get grouped as :invalid
      wrong-order
      missing
      duplicate
      unwanted))))


(let [action-event-ctx  {:action [:create :sdk :issue]
                         :ctx {}
                         :contract {:exactly-ordered [:event-a :event-b]
                                    :each-once [:event-r]
                                    :each-atleast-once [:event-m]
                                    :never [:event-x]}}
      good-events (assoc action-event-ctx
                         ;; "actual" events that should have been read off
                         ;; the topic/wire
                         :events [:event-a :event-b :event-r :event-m])
      also-good   (assoc action-event-ctx
                         :events [:event-a :event-r :event-m :event-b :event-m])
      wrong-order (assoc action-event-ctx
                         :events [:event-b :event-a :event-r :event-m])
      missing     (assoc action-event-ctx
                         :events [:event-a :event-b          :event-m])
      duplicate   (assoc action-event-ctx
                         :events [:event-a :event-b :event-r :event-r :event-m])
      unwanted    (assoc action-event-ctx
                         :events [:event-a :event-b :event-r :event-m :event-x])]
  (group-by (fn [action+events-ctx]
              (if (validate-event-contracts-for-all-actions?
                   identity ;; could be any fn that extracts event type information
                   valid-events?
                   action+events-ctx)
                :valid
                :invalid))
            [good-events also-good wrong-order missing duplicate unwanted]))


;; verifying the sequence validators against the exact payload mentioned below
(let [action-events-map
      '({:action [:create :sdk :issue],
         :description "User creates an issue via sdk",
         :ctx
         {:op {:env :localshiva},
          :client
          {:client-type :android,
           :app-name "MyFirstTestApp",
           :app-id
           "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
           :api-key "8ea83b7703b51c0f8e42a87f0da40bbc",
           :domain "nishanttesting.helpshift.mobi"},
          :entity
          {:message-text "Message from user",
           :type "txt",
           :platform-id
           "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
           :profile-id
           "nishanttesting_profile_20200203143823731-749c12230be1bf4",
           :timestamp "1581415768.321",
           :headers
           {:x-hs-request-id "c79869c4-60ff-4a8c-a3b2-b1ce2a76bb9d",
            :content-type "application/x-www-form-urlencoded"}}},
         :contract
         {:exactly-ordered
          [:create_issue_by_customer :first_reply_to_issue_by_customer]},
         :response
         {"chat?" false,
          "body" "",
          "publish_id" "292",
          "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
          "updated_at" "2020-02-11T10:09:28.335Z",
          "status" 0,
          "title" "Message from user",
          "in_bzhrs" true,
          "created_at" "2020-02-11T10:09:28.335Z",
          "messages"
          [{"origin" "mobile",
            "body" "Message from user",
            "seen_event" {},
            "md_state" "sent",
            "author"
            {"id"
             "nishanttesting_profile_20200203143823731-749c12230be1bf4",
             "name" "IAmGroot e748ee95-ca1f-4aa3-8f78-32abc27136cc"},
            "id" "nishanttesting_message_20200211100928336-1a2a22a6860be44",
            "issue_id"
            "nishanttesting_issue_20200211100928332-23867c234af292d",
            "type" "txt",
            "meta" {},
            "created_at" "2020-02-11T10:09:28.335Z"}]},
         :events
         ({:value
           {"kafka_meta" {"msg_ts" 1581415768370},
            "request_id" "c79869c4-60ff-4a8c-a3b2-b1ce2a76bb9d",
            "origin" 1,
            "v" 1,
            "id" "e9bf92e2-816f-496a-a020-7b8e441bf580",
            "domain" "nishanttesting",
            "type" 2,
            "action_taken_at" 1581415768335,
            "data"
            {"v" 6,
             "issue"
             {"has_duplicates" false,
              "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
              "tt" "i",
              "pid" 292,
              "added_tags" [],
              "is_custom_meta" false,
              "title" "093e1eb96757edad36cefbbd7d88b479ae48959a",
              "state" 0,
              "meta" {},
              "created_at" 1581415768335,
              "current_tags" [],
              "removed_tags" [],
              "is_duplicate" false},
             "queue"
             {"current"
              {"id"
               "nishanttesting_queue_20191226154116892-dda32e29ee0b44f"}},
             "customer"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4"},
             "author"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4",
              "roles" ["user"]},
             "app"
             {"id" "nishanttesting_app_20200111175204020-92241ced65f279f",
              "title" "MyFirstTestApp",
              "created_at" 1578765123798},
             "platform"
             {"id"
              "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
              "type" "android",
              "created_at" 1578765124076},
             "message"
             {"id"
              "nishanttesting_message_20200211100928336-1a2a22a6860be44",
              "type" "txt"}},
            "generated_at" 1581415768369},
           :key "nishanttesting_issue_20200211100928332-23867c234af292d",
           :partition 0,
           :topic "dashboard_events",
           :offset 1230,
           :kaaf.contracts.core/dashboard-event 2}
          {:value
           {"kafka_meta" {"msg_ts" 1581415768371},
            "request_id" "c79869c4-60ff-4a8c-a3b2-b1ce2a76bb9d",
            "origin" 1,
            "v" 1,
            "id" "019e0b64-6de0-44d4-8df1-917661cf706f",
            "domain" "nishanttesting",
            "type" 45,
            "action_taken_at" 1581415768335,
            "data"
            {"v" 6,
             "issue"
             {"has_duplicates" false,
              "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
              "tt" "i",
              "pid" 292,
              "added_tags" [],
              "is_custom_meta" false,
              "title" "093e1eb96757edad36cefbbd7d88b479ae48959a",
              "state" 0,
              "meta" {},
              "created_at" 1581415768335,
              "current_tags" [],
              "removed_tags" [],
              "is_duplicate" false},
             "queue"
             {"current"
              {"id"
               "nishanttesting_queue_20191226154116892-dda32e29ee0b44f"}},
             "customer"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4"},
             "author"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4",
              "roles" ["user"]},
             "app"
             {"id" "nishanttesting_app_20200111175204020-92241ced65f279f",
              "title" "MyFirstTestApp",
              "created_at" 1578765123798},
             "platform"
             {"id"
              "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
              "type" "android",
              "created_at" 1578765124076},
             "message"
             {"id"
              "nishanttesting_message_20200211100928336-1a2a22a6860be44",
              "type" "txt",
              "text" "093e1eb96757edad36cefbbd7d88b479ae48959a"}},
            "generated_at" 1581415768370},
           :key "nishanttesting_issue_20200211100928332-23867c234af292d",
           :partition 0,
           :topic "dashboard_events",
           :offset 1231,
           :kaaf.contracts.core/dashboard-event 45})}
        {:action [:create :sdk :message],
         :description "User sends a message to an issue",
         :ctx
         {:op {:env :localshiva},
          :client
          {:client-type :android,
           :app-name "MyFirstTestApp",
           :app-id
           "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
           :api-key "8ea83b7703b51c0f8e42a87f0da40bbc",
           :domain "nishanttesting.helpshift.mobi"},
          :entity
          {:message-text "Another message from user",
           :type "txt",
           :platform-id
           "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
           :profile-id
           "nishanttesting_profile_20200203143823731-749c12230be1bf4",
           :timestamp "1581415778.347",
           :headers
           {:x-hs-request-id "694564fb-3250-4d60-8376-85cfc3beda15",
            :content-type "application/x-www-form-urlencoded"},
           :issue-id
           "nishanttesting_issue_20200211100928332-23867c234af292d"}},
         :contract {:exactly-ordered [:reply_to_issue_by_customer]},
         :response
         {"origin" "mobile",
          "body" "Another message from user",
          "seen_event" {},
          "md_state" "sent",
          "author"
          {"id" "nishanttesting_profile_20200203143823731-749c12230be1bf4",
           "name" "IAmGroot e748ee95-ca1f-4aa3-8f78-32abc27136cc"},
          "id" "nishanttesting_message_20200211100938360-42ad0e151946bf9",
          "issue_id"
          "nishanttesting_issue_20200211100928332-23867c234af292d",
          "type" "txt",
          "meta" {},
          "in_bzhrs" true,
          "created_at" "2020-02-11T10:09:38.356Z"},
         :events
         ({:value
           {"kafka_meta" {"msg_ts" 1581415783394},
            "request_id" "694564fb-3250-4d60-8376-85cfc3beda15",
            "origin" 1,
            "v" 1,
            "id" "0c982f0e-09d4-4d19-85a0-5f0b8fa2aaea",
            "domain" "nishanttesting",
            "type" 11,
            "action_taken_at" 1581415778356,
            "data"
            {"message"
             {"id"
              "nishanttesting_message_20200211100938360-42ad0e151946bf9",
              "type" "txt"},
             "issue"
             {"has_duplicates" false,
              "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
              "tt" "i",
              "pid" 292,
              "is_custom_meta" false,
              "title" "093e1eb96757edad36cefbbd7d88b479ae48959a",
              "state" 0,
              "meta" {},
              "created_at" 1581415768335,
              "current_tags" [],
              "is_duplicate" false},
             "queue"
             {"current"
              {"id"
               "nishanttesting_queue_20191226154116892-dda32e29ee0b44f"}},
             "author"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4",
              "roles" ["user"]},
             "v" 6,
             "app"
             {"id" "nishanttesting_app_20200111175204020-92241ced65f279f",
              "title" "MyFirstTestApp"},
             "customer"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4"},
             "changed_fields" ["messages"],
             "platform"
             {"id"
              "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
              "type" "android"}},
            "generated_at" 1581415783394},
           :key "nishanttesting_issue_20200211100928332-23867c234af292d",
           :partition 0,
           :topic "dashboard_events",
           :offset 1232,
           :kaaf.contracts.core/dashboard-event 11})}
        {:action [:create :anon :login],
         :description "agent logs in to the dasboard",
         :ctx
         {:op {:env :localshiva},
          :client
          {:client-type :webui,
           :agent-username "nishant.shah@helpshift.com",
           :agent-password "helpshift",
           :domain "nishanttesting.helpshift.mobi"},
          :entity
          {:username "nishant.shah@helpshift.com",
           :password "helpshift",
           :headers
           {:user-agent
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:72.0) Gecko/20100101 Firefox/72.0",
            :x-hs-request-id "97e79986-3965-480f-91d5-fa456e278fbf"}}},
         :contract {:exactly-ordered [:login_agent]},
         :response
         {"__hsft"
          {:discard true,
           :domain "nishanttesting.helpshift.mobi",
           :path "/",
           :secure false,
           :value "08cbe3d4-44a6-4f55-8b49-b721e481dc83",
           :version 0},
          "_csrf_token"
          {:discard true,
           :domain "nishanttesting.helpshift.mobi",
           :path "/",
           :secure false,
           :value "JQJ8K776gmJfmr-KOb9WbvNzQSkhhvE9eKkkc5RSSTM",
           :version 0}},
         :events ()}
        {:action [:create :xhr :message],
         :description "agent sends message to an issue",
         :ctx
         {:op {:env :localshiva},
          :client
          {:client-type :xhr, :domain "nishanttesting.helpshift.mobi"},
          :entity
          {:body "Test message by agent",
           :issue_id
           "nishanttesting_issue_20200211100928332-23867c234af292d",
           :headers
           {:user-agent
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:72.0) Gecko/20100101 Firefox/72.0",
            :x-hs-request-id "7e4c85af-6413-437f-ab38-a0d935b7a2c9",
            :content-type "application/x-www-form-urlencoded",
            :X-Requested-With "XMLHttpRequest"}}},
         :contract {:exactly-ordered [:reply_to_issue_by_agent]},
         :respone
         {"data"
          {"messages"
           {"created_at_unix_ts" 0,
            "origin" "admin",
            "body" "Test message by agent",
            "is_redacted" false,
            "author"
            {"name" "nishant.shah",
             "avatar"
             "https://secure.gravatar.com/avatar/7b998a800087d295cf4c2551fb56d059?s=256&d=https://d3e51fp79zp4el.cloudfront.net/images/dp_256.png",
             "id"
             "nishanttesting_profile_20191226154107423-91416c1d90009a6"},
            "review-info" nil,
            "id" "nishanttesting_message_20200211100958690-2414b93f82fdb05",
            "issue_id"
            "nishanttesting_issue_20200211100928332-23867c234af292d",
            "created_at_epoch" 1581415798686,
            "created_at_ts" "20200211T100958.686Z",
            "created_at_iso" "2020-02-11T10:09:58.686Z",
            "type" "txt",
            "created_at_humanize" "0s",
            "is_you" true,
            "created_at" "February-11-2020 10:09:58 AM",
            "render_info" {"is_chatbot_message" false},
            "has_attachments" false,
            "attachments" [],
            "is-right" true,
            "by_admin" true}}},
         :events
         ({:value
           {"kafka_meta" {"msg_ts" 1581415798739},
            "request_id" "7e4c85af-6413-437f-ab38-a0d935b7a2c9",
            "origin" 8,
            "v" 1,
            "id" "440fddbb-0626-4c9d-883e-f7f3e0c76091",
            "domain" "nishanttesting",
            "type" 6,
            "action_taken_at" 1581415798695,
            "data"
            {"message"
             {"id"
              "nishanttesting_message_20200211100958690-2414b93f82fdb05",
              "type" "txt"},
             "issue"
             {"has_duplicates" false,
              "is_fr" true,
              "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
              "tt" "i",
              "pid" 292,
              "is_custom_meta" false,
              "title" "093e1eb96757edad36cefbbd7d88b479ae48959a",
              "state_trans" {"previous" {"state" 0}, "current" {"state" 2}},
              "state" 2,
              "meta" {},
              "created_at" 1581415768335,
              "current_tags" [],
              "is_duplicate" false},
             "queue"
             {"current"
              {"id"
               "nishanttesting_queue_20191226154116892-dda32e29ee0b44f"}},
             "author"
             {"id"
              "nishanttesting_profile_20191226154107423-91416c1d90009a6",
              "roles" ["admin"]},
             "v" 6,
             "assignee"
             {"current"
              {"id"
               "nishanttesting_profile_20191226154107423-91416c1d90009a6",
               "roles" ["admin"],
               "group_ids"
               ["nishanttesting_group_20191226154116912-06c75ae77b5c80c"],
               "team_id"
               "nishanttesting_team_20191226154112870-ce9751da419c87b"}},
             "app"
             {"id" "nishanttesting_app_20200111175204020-92241ced65f279f",
              "title" "MyFirstTestApp"},
             "customer"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4"},
             "changed_fields" ["state_data.state" "assignee" "messages"],
             "platform"
             {"id"
              "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
              "type" "android"}},
            "generated_at" 1581415798738},
           :key "nishanttesting_issue_20200211100928332-23867c234af292d",
           :partition 0,
           :topic "dashboard_events",
           :offset 1234,
           :kaaf.contracts.core/dashboard-event 6}
          {:value
           {"kafka_meta" {"msg_ts" 1581415798739},
            "request_id" "7e4c85af-6413-437f-ab38-a0d935b7a2c9",
            "origin" 4,
            "v" 1,
            "id" "2b205057-8b45-4a0a-af6a-4b1dfe399a8c",
            "domain" "nishanttesting",
            "type" 12,
            "action_taken_at" 1581415798695,
            "data"
            {"message"
             {"id"
              "nishanttesting_message_20200211100958690-2414b93f82fdb05",
              "type" "txt"},
             "issue"
             {"has_duplicates" false,
              "is_fr" true,
              "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
              "tt" "i",
              "pid" 292,
              "is_custom_meta" false,
              "title" "093e1eb96757edad36cefbbd7d88b479ae48959a",
              "state_trans" {"previous" {"state" 0}, "current" {"state" 2}},
              "state" 2,
              "meta" {},
              "created_at" 1581415768335,
              "current_tags" [],
              "is_duplicate" false},
             "queue"
             {"current"
              {"id"
               "nishanttesting_queue_20191226154116892-dda32e29ee0b44f"}},
             "author"
             {"id"
              "nishanttesting_profile_20191226154107423-91416c1d90009a6",
              "roles" ["admin"]},
             "v" 6,
             "assignee"
             {"current"
              {"id"
               "nishanttesting_profile_20191226154107423-91416c1d90009a6",
               "roles" ["admin"],
               "group_ids"
               ["nishanttesting_group_20191226154116912-06c75ae77b5c80c"],
               "team_id"
               "nishanttesting_team_20191226154112870-ce9751da419c87b"}},
             "app"
             {"id" "nishanttesting_app_20200111175204020-92241ced65f279f",
              "title" "MyFirstTestApp"},
             "customer"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4"},
             "changed_fields" ["state_data.state" "assignee" "messages"],
             "platform"
             {"id"
              "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
              "type" "android"}},
            "generated_at" 1581415798739},
           :key "nishanttesting_issue_20200211100928332-23867c234af292d",
           :partition 0,
           :topic "dashboard_events",
           :offset 1235,
           :kaaf.contracts.core/dashboard-event 12})}
        {:action [:update :xhr :issue],
         :description "agent updates the status of the issue",
         :ctx
         {:op {:env :localshiva},
          :client
          {:client-type :xhr, :domain "nishanttesting.helpshift.mobi"},
          :entity
          {:status 2,
           :id "nishanttesting_issue_20200211100928332-23867c234af292d",
           :headers
           {:user-agent
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:72.0) Gecko/20100101 Firefox/72.0",
            :x-hs-request-id "b8c5810d-c3a5-4b68-8af8-d9914e25d5b3",
            :content-type "application/x-www-form-urlencoded",
            :X-Requested-With "XMLHttpRequest"}}},
         :contract {:exactly-ordered [:resolve_issue]},
         :response
         {"data"
          {"state_text" "nishant.shah Resolved",
           "status_updated_at" "2020-02-11T10:10:08.707Z",
           "queue_interaction_start_ts" nil,
           "updated_at" "2020-02-11T10:10:08.707Z",
           "queue_backlog_start_ts" nil,
           "status" 2,
           "state_data"
           {"score" 18418584192,
            "state_updated_at" "2020-02-11T10:10:08.707Z",
            "agent"
            "nishanttesting_profile_20191226154107423-91416c1d90009a6",
            "new_data" {"status" 2, "state" 4},
            "changed_at" "2020-02-11T10:10:08.707Z",
            "state" 4,
            "agent_name" "nishant.shah",
            "message_origin" nil,
            "old_data"
            {"status" 1,
             "conv-initiated?" true,
             "fresh?" false,
             "queue_id"
             "nishanttesting_queue_20191226154116892-dda32e29ee0b44f",
             "assignee"
             "nishanttesting_profile_20191226154107423-91416c1d90009a6",
             "state" 2}},
           "changed_at" "0s",
           "meta"
           {"extra"
            {"api-version" 2,
             "attachment-supported-sdk?" true,
             "follow-up-supported-sdk?" true},
            "first_end_user_message_id"
            "nishanttesting_message_20200211100928336-1a2a22a6860be44"}}},
         :events
         ({:value
           {"kafka_meta" {"msg_ts" 1581415808774},
            "request_id" "b8c5810d-c3a5-4b68-8af8-d9914e25d5b3",
            "origin" 4,
            "v" 1,
            "id" "131d146e-82a2-401c-b284-7263b6d9c74d",
            "domain" "nishanttesting",
            "type" 3,
            "action_taken_at" 1581415808707,
            "data"
            {"issue"
             {"has_duplicates" false,
              "is_fr" false,
              "id" "nishanttesting_issue_20200211100928332-23867c234af292d",
              "tt" "i",
              "pid" 292,
              "is_custom_meta" false,
              "title" "093e1eb96757edad36cefbbd7d88b479ae48959a",
              "state_trans" {"previous" {"state" 2}, "current" {"state" 4}},
              "state" 4,
              "meta" {},
              "created_at" 1581415768335,
              "current_tags" [],
              "is_duplicate" false},
             "queue"
             {"current"
              {"id"
               "nishanttesting_queue_20191226154116892-dda32e29ee0b44f"}},
             "author"
             {"id"
              "nishanttesting_profile_20191226154107423-91416c1d90009a6",
              "roles" ["admin"]},
             "v" 6,
             "assignee"
             {"current"
              {"id"
               "nishanttesting_profile_20191226154107423-91416c1d90009a6",
               "roles" ["admin"],
               "group_ids"
               ["nishanttesting_group_20191226154116912-06c75ae77b5c80c"],
               "team_id"
               "nishanttesting_team_20191226154112870-ce9751da419c87b"}},
             "app"
             {"id" "nishanttesting_app_20200111175204020-92241ced65f279f",
              "title" "MyFirstTestApp"},
             "customer"
             {"id"
              "nishanttesting_profile_20200203143823731-749c12230be1bf4"},
             "changed_fields" ["state_data.state"],
             "platform"
             {"id"
              "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2",
              "type" "android"}},
            "generated_at" 1581415808774},
           :key "nishanttesting_issue_20200211100928332-23867c234af292d",
           :partition 0,
           :topic "dashboard_events",
           :offset 1236,
           :kaaf.contracts.core/dashboard-event 3})})]
  (apply validate-kafka-events-for-actions action-events-map)
  )
