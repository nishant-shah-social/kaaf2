(ns kaaf.utils.crypto
  (:require [clojure.string :as cs])
  (:import [javax.crypto Mac]
           [javax.crypto.spec SecretKeySpec]))

;;; Copied over from shuriken.crypto

(defn hmac
  "Generates a Base64 HMAC with the supplied key on a string of data."
  [key data & {:keys [base64-encode?] :or {base64-encode? true}}]
  (let [hmac-algorithm "HmacSHA256"
        mac (Mac/getInstance hmac-algorithm)]
    (.init mac (SecretKeySpec. key hmac-algorithm))
    (.doFinal mac data)))


(defn byte-array->hex-string
  "Converts a byte array to hex-string"
  [byte-array]
  (apply str (map #(format "%02x" %) byte-array)))


(defn gen-signature
  "Generate signature from the request and given key"
  [method uri params secret]
  (let [extended-params (assoc params
                          "uri" uri
                          "method" (cs/upper-case (name method)))
        sorted-params (into (sorted-map) extended-params)
        str-params (map #(str (key %) "=" (val %)) sorted-params)
        data (cs/join "&" str-params)
        hmac-sha256 (hmac (.getBytes ^String secret)
                          (.getBytes ^String data "utf-8"))]
    (byte-array->hex-string hmac-sha256)))

;;
;; REPL exploration utilities
;;
(comment
  ;; Crypto generates a signature this way, which is used as seen below:

  ;; Data models created by fns in shuriken.api.util

  ;; Base API request params, generated by #'shuriken.api.util/base-req-params
  ;; Note: timestamp generated new each time, probably needs enough control
  ;; to emulate past/present/future events
  ;;
  #_{"platform-id" "ash_platform_20140314104643205-8af60b1d49ee842",
     "timestamp" "1578296722.340"}


  ;; Issue-related payload generated by #'shuriken.api.util/create-issue
  ;;
  #_{:route "/api/lib/1/issues/",
     :method "POST",
     :params
     {"message-text" "fd03fe9803c94e6da5445037146ef407",
      "platform-id" "ash_platform_20140314104643205-8af60b1d49ee842",
      "profile-id" "ash_profile_20140324104927390-b31b40468e9c742",
      "timestamp" "1578316470.565"}}

  (let [ctx {:route "/api/lib/1/issues/",
             :method :post,
             :params ;; for some reason, params have to be a sorted-map
             (into (sorted-map)
                   {"message-text" "fd03fe9803c94e6da5445037146ef407",
                    "platform-id" "ash_platform_20140314104643205-8af60b1d49ee842",
                    "profile-id" "ash_profile_20140324104927390-b31b40468e9c742",
                    "timestamp" "1578296722.340"})}
        signature (gen-signature (:method ctx)
                                 (:route ctx)
                                 (:params ctx)
                                 "topsecret")
        signed-params (assoc (:params ctx)
                             "signature"
                             signature)
        api-server-endpoint (fn [route] (str "http://foo.helpshift.mobi:8080"
                                             route))
        http-get (fn [& x] x)
        http-post (fn [& x] x)
        headers {}]
    {:get  (http-get (api-server-endpoint (:route ctx))
                     {:query-params signed-params})
     :post (http-post (api-server-endpoint (:route ctx))
                      {:form-params signed-params
                       :headers (conj {"content-type" "application/x-www-form-urlencoded"}
                                      headers)})})
  (gen-signature "POST" "/api/lib/2/issues/" (into (sorted-map) {"profile-id" "nishanttesting_profile_20200203143823731-749c12230be1bf4"
                                                                 "platform-id" "nishanttesting_platform_20200111175204093-781dbe6bf2b35d2"
                                                                 "message-text" "Test message from user"
                                                                 "timestamp" "1583407694.856"
                                                                 "type" "txt"}) "8ea83b7703b51c0f8e42a87f0da40bbc")
  )
